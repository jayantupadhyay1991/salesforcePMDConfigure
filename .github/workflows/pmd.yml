name: Run Scanner

on:
  pull_request:
    paths:
      - 'PMDConfigureSFDC/force-app/main/default/classes/**.cls' # Trigger only when Apex classes change
  #push:

jobs:
  scan-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout with full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full commit history is fetched

      - name: Install SFDX CLI and Scanner
        run: |
          npm install sfdx-cli -g
          sfdx plugins:install @salesforce/sfdx-scanner
      
      # Determine changed Apex classes
      - name: Get changed Apex classes
        id: changed-classes
        run: |
          echo "##[set-output name=changed_classes;]$(git diff --name-only HEAD^ HEAD | grep '.cls$')"

      # Determine changed Apex classes
      - name: Get changed Apex classes
        id: changed-classes-test-new
        run: |
          git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '.cls$' | tee changed_classes.txt

      # Print all changed classes
      - name: Print all changed classes
        run: |
          cat changed_classes.txt
      
      # start for adding report link as comment    
      - name: Apex static analysis on all Changed Apex classes in this PR
        if: ${{ steps.changed-classes.outputs.changed_classes != '' }} # Run only if changed classes exist
        run: |
          # Create a temporary directory to store individual reports
          mkdir -p temp_reports
          
          # Iterate over each changed class
          while IFS= read -r file; do
            # Extract the filename from the file path
            filename=$(basename "$file")
              # Run the scanner and save the report to a temporary file
              sfdx scanner run --target "$file" --pmdconfig "PMDConfigureSFDC/force-app/main/default/pmd/pmdrules.xml" -f html --outfile "temp_reports/${filename%%.*}.html"
          done < changed_classes.txt
        
          # Merge all individual reports into a single file
          # cat temp_reports/*.html > apexScanResults.html
          # Concatenate all individual reports into a single file
          for report_file in temp_reports/*.html; do
            cat "$report_file" >> apexScanResults.html
          done
        
          # Clean up temporary directory
          rm -rf temp_reports
      
      - name: Upload PMD Report
        uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
           name: scanner-output-${{ github.run_number }}.html
           path: apexScanResults.html
        
      - name: Output artifact URL
        run:  echo 'Artifact URL is ${{ steps.artifact-upload-step.outputs.artifact-url }}'
        
